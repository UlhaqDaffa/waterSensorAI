/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PH } from "./PH";
import { PHCountArgs } from "./PHCountArgs";
import { PHFindManyArgs } from "./PHFindManyArgs";
import { PHFindUniqueArgs } from "./PHFindUniqueArgs";
import { CreatePHArgs } from "./CreatePHArgs";
import { UpdatePHArgs } from "./UpdatePHArgs";
import { DeletePHArgs } from "./DeletePHArgs";
import { PHService } from "../ph.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PH)
export class PHResolverBase {
  constructor(
    protected readonly service: PHService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "read",
    possession: "any",
  })
  async _phsMeta(@graphql.Args() args: PHCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PH])
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "read",
    possession: "any",
  })
  async phs(@graphql.Args() args: PHFindManyArgs): Promise<PH[]> {
    return this.service.phs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PH, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "read",
    possession: "own",
  })
  async ph(@graphql.Args() args: PHFindUniqueArgs): Promise<PH | null> {
    const result = await this.service.ph(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PH)
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "create",
    possession: "any",
  })
  async createPH(@graphql.Args() args: CreatePHArgs): Promise<PH> {
    return await this.service.createPh({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PH)
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "update",
    possession: "any",
  })
  async updatePH(@graphql.Args() args: UpdatePHArgs): Promise<PH | null> {
    try {
      return await this.service.updatePh({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PH)
  @nestAccessControl.UseRoles({
    resource: "PH",
    action: "delete",
    possession: "any",
  })
  async deletePH(@graphql.Args() args: DeletePHArgs): Promise<PH | null> {
    try {
      return await this.service.deletePh(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
