/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Turbidity as PrismaTurbidity } from "@prisma/client";

export class TurbidityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TurbidityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.turbidity.count(args);
  }

  async turbidities<T extends Prisma.TurbidityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TurbidityFindManyArgs>
  ): Promise<PrismaTurbidity[]> {
    return this.prisma.turbidity.findMany<Prisma.TurbidityFindManyArgs>(args);
  }
  async turbidity<T extends Prisma.TurbidityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TurbidityFindUniqueArgs>
  ): Promise<PrismaTurbidity | null> {
    return this.prisma.turbidity.findUnique(args);
  }
  async createTurbidity<T extends Prisma.TurbidityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TurbidityCreateArgs>
  ): Promise<PrismaTurbidity> {
    return this.prisma.turbidity.create<T>(args);
  }
  async updateTurbidity<T extends Prisma.TurbidityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TurbidityUpdateArgs>
  ): Promise<PrismaTurbidity> {
    return this.prisma.turbidity.update<T>(args);
  }
  async deleteTurbidity<T extends Prisma.TurbidityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TurbidityDeleteArgs>
  ): Promise<PrismaTurbidity> {
    return this.prisma.turbidity.delete(args);
  }
}
