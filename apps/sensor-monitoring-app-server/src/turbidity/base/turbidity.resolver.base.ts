/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Turbidity } from "./Turbidity";
import { TurbidityCountArgs } from "./TurbidityCountArgs";
import { TurbidityFindManyArgs } from "./TurbidityFindManyArgs";
import { TurbidityFindUniqueArgs } from "./TurbidityFindUniqueArgs";
import { CreateTurbidityArgs } from "./CreateTurbidityArgs";
import { UpdateTurbidityArgs } from "./UpdateTurbidityArgs";
import { DeleteTurbidityArgs } from "./DeleteTurbidityArgs";
import { TurbidityService } from "../turbidity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Turbidity)
export class TurbidityResolverBase {
  constructor(
    protected readonly service: TurbidityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "read",
    possession: "any",
  })
  async _turbiditiesMeta(
    @graphql.Args() args: TurbidityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Turbidity])
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "read",
    possession: "any",
  })
  async turbidities(
    @graphql.Args() args: TurbidityFindManyArgs
  ): Promise<Turbidity[]> {
    return this.service.turbidities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Turbidity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "read",
    possession: "own",
  })
  async turbidity(
    @graphql.Args() args: TurbidityFindUniqueArgs
  ): Promise<Turbidity | null> {
    const result = await this.service.turbidity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turbidity)
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "create",
    possession: "any",
  })
  async createTurbidity(
    @graphql.Args() args: CreateTurbidityArgs
  ): Promise<Turbidity> {
    return await this.service.createTurbidity({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turbidity)
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "update",
    possession: "any",
  })
  async updateTurbidity(
    @graphql.Args() args: UpdateTurbidityArgs
  ): Promise<Turbidity | null> {
    try {
      return await this.service.updateTurbidity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Turbidity)
  @nestAccessControl.UseRoles({
    resource: "Turbidity",
    action: "delete",
    possession: "any",
  })
  async deleteTurbidity(
    @graphql.Args() args: DeleteTurbidityArgs
  ): Promise<Turbidity | null> {
    try {
      return await this.service.deleteTurbidity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
