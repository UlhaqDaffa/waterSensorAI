/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Acceleration } from "./Acceleration";
import { AccelerationCountArgs } from "./AccelerationCountArgs";
import { AccelerationFindManyArgs } from "./AccelerationFindManyArgs";
import { AccelerationFindUniqueArgs } from "./AccelerationFindUniqueArgs";
import { CreateAccelerationArgs } from "./CreateAccelerationArgs";
import { UpdateAccelerationArgs } from "./UpdateAccelerationArgs";
import { DeleteAccelerationArgs } from "./DeleteAccelerationArgs";
import { AccelerationService } from "../acceleration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Acceleration)
export class AccelerationResolverBase {
  constructor(
    protected readonly service: AccelerationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "read",
    possession: "any",
  })
  async _accelerationsMeta(
    @graphql.Args() args: AccelerationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Acceleration])
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "read",
    possession: "any",
  })
  async accelerations(
    @graphql.Args() args: AccelerationFindManyArgs
  ): Promise<Acceleration[]> {
    return this.service.accelerations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Acceleration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "read",
    possession: "own",
  })
  async acceleration(
    @graphql.Args() args: AccelerationFindUniqueArgs
  ): Promise<Acceleration | null> {
    const result = await this.service.acceleration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Acceleration)
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "create",
    possession: "any",
  })
  async createAcceleration(
    @graphql.Args() args: CreateAccelerationArgs
  ): Promise<Acceleration> {
    return await this.service.createAcceleration({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Acceleration)
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "update",
    possession: "any",
  })
  async updateAcceleration(
    @graphql.Args() args: UpdateAccelerationArgs
  ): Promise<Acceleration | null> {
    try {
      return await this.service.updateAcceleration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Acceleration)
  @nestAccessControl.UseRoles({
    resource: "Acceleration",
    action: "delete",
    possession: "any",
  })
  async deleteAcceleration(
    @graphql.Args() args: DeleteAccelerationArgs
  ): Promise<Acceleration | null> {
    try {
      return await this.service.deleteAcceleration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
