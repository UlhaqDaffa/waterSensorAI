/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Temperature as PrismaTemperature } from "@prisma/client";

export class TemperatureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TemperatureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.temperature.count(args);
  }

  async temperatures<T extends Prisma.TemperatureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TemperatureFindManyArgs>
  ): Promise<PrismaTemperature[]> {
    return this.prisma.temperature.findMany<Prisma.TemperatureFindManyArgs>(
      args
    );
  }
  async temperature<T extends Prisma.TemperatureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TemperatureFindUniqueArgs>
  ): Promise<PrismaTemperature | null> {
    return this.prisma.temperature.findUnique(args);
  }
  async createTemperature<T extends Prisma.TemperatureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TemperatureCreateArgs>
  ): Promise<PrismaTemperature> {
    return this.prisma.temperature.create<T>(args);
  }
  async updateTemperature<T extends Prisma.TemperatureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TemperatureUpdateArgs>
  ): Promise<PrismaTemperature> {
    return this.prisma.temperature.update<T>(args);
  }
  async deleteTemperature<T extends Prisma.TemperatureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TemperatureDeleteArgs>
  ): Promise<PrismaTemperature> {
    return this.prisma.temperature.delete(args);
  }
}
